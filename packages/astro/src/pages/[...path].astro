---
import { type DirectoryEntry, getDirectoryEntries } from "@packages/common";

const dirPath: string = Astro.params.path ?? '';
let files: DirectoryEntry[] | null = null;
let parentDir: string | null = null;

try {
    files = await getDirectoryEntries(dirPath);
    const pathDirs = dirPath.split("/");
    const length = pathDirs.length;
    if (length > 0 && pathDirs[0].length > 0) {
        parentDir = "/" + pathDirs.slice(0, length - 1).join("/");
    }
} catch (e) {
    console.error(e)
}
---

<!DOCTYPE html>
<html lang=ja">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SimpleCDN</title>
</head>

<body>
  <center>
    <h1>CDN File list</h1>
    <hr>
    {(files == null) && <p>404 Not Found</p>}
    <button onclick="upload()">アップロード(ログインが必要です)</button>
  </center>
  <ul id="files">
    {(parentDir != null) && <li><a href={parentDir}>..</a></li>}
    {files?.map((file) => <li>
        <a href={file.name}>{file.name}</a> ({file.directory ? "ディレクトリ" : file.sizeStr})
    </li>)}
  </ul>
  <script>
    function showOpenFilePickerPolyfill(options = {}) {
        return new Promise((resolve) => {
            const input = document.createElement("input");
            input.type = "file";
            input.multiple = options.multiple || false;
            if (options.types)
                input.accept = options.types
                    .map((type) => type.accept)
                    .flatMap((inst) => Object.keys(inst).flatMap((key) => inst[key]))
                    .join(",");

            input.addEventListener("change", () => {
                resolve(
                    [...input.files].map((file) => {
                        return {
                            getFile: async () =>
                                new Promise((resolve) => {
                                    resolve(file);
                                }),
                        };
                    })
                );
            });

            input.click();
        });
    }

    async function upload() {
        console.log("trying..")
        try {
            let files = await showOpenFilePickerPolyfill();
            /** @type {File} */
            let file = await files[0].getFile();
            if (!window.confirm(`${file.name} をアップロードしますか？`)) return;
            let formData = new FormData();
            formData.append("file", file);
            let params = new URLSearchParams({
                path: location.pathname
            });
            let res = await fetch("/api/upload?" + params, {
                method: "POST",
                body: formData
            });
            if (res.status == 200) {
                let json = await res.json();
                alert(`アップロードしました: ${json.fileName}`);
                return location.reload();
            }
            else if (res.status == 401)
                return alert("ログインに失敗しました");
            else
                return alert(`不明なエラー: ${res.status} ${res.statusText}`);
        } catch { console.error("Failed") }
    }
  </script>
</body>

</html>